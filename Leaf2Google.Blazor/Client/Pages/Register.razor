@page "/google/auth"
@using Leaf2Google.Models.Google
@using Leaf2Google.Blazor.Client.Helpers
@inject LeafAuthenticationStateService AuthState
@inject NavigationManager Navigation
@attribute [AllowAnonymous]

<div class="position-absolute">
    <div class="alert alert-warning w-100 position-relative @LoginErrorClass" role="alert">
        Unable to authenticate with Nissan services using the supplied credentials.
    </div>
</div>

<LoginForm @ref="loginForm" ValidSubmit="@OnValidSubmit" />

@code {
    public LoginForm? loginForm;

    private bool ShowLoginError { get; set; }

    public string LoginErrorClass => ShowLoginError ? "" : "d-none";

    protected async Task OnValidSubmit(ChangeEventArgs? args)
    {
        Navigation.TryGetQueryString<string>("client_id", out string client_id);
        Navigation.TryGetQueryString<string>("redirect_uri", out string redirect_uri);
        Navigation.TryGetQueryString<string>("state", out string state);

        RegisterModel registerModel = new()
            {
                NissanUsername = loginForm?.loginModel.NissanUsername ?? "",
                NissanPassword = loginForm?.loginModel.NissanPassword ?? "",
                client_id = client_id,
                redirect_uri = string.IsNullOrEmpty(redirect_uri) ? null : new Uri(redirect_uri),
                state = state
            };

        var registerResult = await AuthState.Register(registerModel);

        if (registerResult?.success ?? false)
        {
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            var returnUrl = QueryHelpers.ParseQuery(uri.Query).FirstOrDefault(val => val.Key == "returnUrl");
            var returnUrlString = returnUrl.Value.ToString();

            if (!string.IsNullOrEmpty(returnUrlString))
            {
                Navigation.NavigateTo(returnUrlString);
            }
        }
        else
        {
            ShowLoginError = true;
        }
    }
}
